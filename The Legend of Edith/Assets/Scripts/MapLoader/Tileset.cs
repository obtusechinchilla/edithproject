//------------------------------------------------------------------------------
// <auto-generated>
//     O cÃ³digo foi gerado por uma ferramenta.
//     VersÃ£o de Tempo de ExecuÃ§Ã£o:4.0.30319.18444
//
//     As alteraÃ§Ãµes ao arquivo poderÃ£o causar comportamento incorreto e serÃ£o perdidas se
//     o cÃ³digo for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Xml;
using UnityEngine;
using System.Collections.Generic;

namespace MapReader {
	public class Tileset {

		String name;
		public int tileWidth;
		public int tileHeight;
		int firstGid;
		int lastGid;

		String imagePath;
		int imageWidth;
		int imageHeight;

		int tileAmount;

		public Texture2D texture;
		public Dictionary<int, Tile> tiles;

		public Tileset (XmlNode node) {
			name = node.Attributes ["name"].Value;
			tileWidth = int.Parse (node.Attributes ["tilewidth"].Value);
			tileHeight = int.Parse (node.Attributes ["tileheight"].Value);
			firstGid = int.Parse (node.Attributes ["firstgid"].Value);

			imagePath = node["image"].Attributes["source"].Value;
			imageWidth = int.Parse (node["image"].Attributes["width"].Value);
			imageHeight = int.Parse (node["image"].Attributes["height"].Value);

			int tileAmountWidth = (int)Math.Floor ((double)imageWidth / tileWidth);
			lastGid = tileAmountWidth * (int)Math.Floor ((double)imageHeight / tileHeight) + firstGid - 1;

			tiles = new Dictionary<int, Tile>();

			loadTexture ();
			loadTiles ();
		}

		private void loadTexture() {
			string name = imagePath.Substring(imagePath.LastIndexOf("/") + 1);
			Debug.Log (name);
			texture = (Texture2D)UnityEditor.AssetDatabase.LoadAssetAtPath("Assets/Sprites/Tilesets/" + name, typeof(Texture2D));
		}

		private void loadTiles() {
			int numberOfTilesX = imageWidth / tileWidth;
			int numberOfTilesY = imageHeight / tileHeight;

			for (int i = 0; i < numberOfTilesY; i++) {
				for (int j = 0; j < numberOfTilesX; j++) {
					Rect tileArea = new Rect(j * tileWidth, (numberOfTilesY - i - 1) * tileHeight, tileWidth, tileHeight);
					int gid = firstGid + j + (i * numberOfTilesX);

					tiles.Add(gid, new Tile(tileArea, gid));
				}
			}
		}
		
		public int getFirstGid() {
			return firstGid;
		}
		
		public int getLastGid() {
			return lastGid;
		}
	}
}